------------解析库------------
Python标准库	BeautifulSoup(markup, “html.parser”)	Python的内置标准库、执行速度适中 、文档容错能力强
lxml HTML 解析器	BeautifulSoup(markup, “lxml”)	速度快、文档容错能力强	需要安装C语言库
lxml XML 解析器	BeautifulSoup(markup, “xml”)	速度快、唯一支持XML的解析器	需要安装C语言库
html5lib	BeautifulSoup(markup, “html5lib”)	最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档	速度慢、不依赖外部扩展

------------soup属性------------
————使用标签名来获取结点：
soup.标签名

————使用标签名来获取结点标签名（这个重点是name，主要用于非标签名式筛选时，获取结果的标签名）：
soup.标签.name

————使用标签名来获取结点属性：
soup.标签.attrs（获取全部属性）

soup.标签.attrs[属性名]（获取指定属性）

soup.标签[属性名]（获取指定属性）

soup.标签.get(属性名)

————使用标签名来获取结点的文本内容：
soup.标签.text
soup.标签.string
soup.标签.get_text()

获取标签里的字符串/一个标签：（1）如果某标签里只有一个标签：soup.p.string；（2）如果很多标签就无法获取：soup.html.string
多个内容，需要遍历：soup.strings
去除空白字符的元素文本：soup.head.stripped_strings
获取注释文档：soup.a.string == bs4.element.Comment
列表形式打印子节点：soup.head.contents
节点获取：
.parents（所有父节点） | .next_sibling .previous_sibling（上一个兄弟节点） | .next_siblings（全部兄弟节点，当前节点下面的） |
.next_element .previous_element（下一个节点，不分关系） | .next_elements | .children .descendants

上面的筛选方式可以使用嵌套：print(soup.p.a)#p标签下的a标签
center_tag = soup.new_tag('center')
title_tag = soup.new_tag('h1')
title_tag.string = title
center_tag.insert(1, title_tag)
body.insert(1, center_tag)


------------soup方法------------
find( name , attrs , recursive , text , **kwargs ): 根据参数来找出对应的标签，但只返回第一个符合条件的结果。
find_all( name , attrs , recursive , text , **kwargs ): 根据参数来找出对应的标签，但只返回所有符合条件的结果。
筛选条件参数介绍：
name：为标签名,根据标签名来筛选标签
（1）字符串：soup.find_all('b')
（2）正则；soup.find_all(re.compile('^b')
（3）列表：soup.find_all(['a', 'b'])
（4）True（匹配任何值，不返回节点）：soup.find_all(True)
（5）方法（接受一个参数，True——找到）：
    def has_class_but_no_id(tag):
        return tag.has_attr('class') and not tag.has_attr('id')
    soup.find_all(has_class_but_no_id)
（6）keyword（把参数当做tag的属性）：soup.find_all(id='text'); soup.find_all(href=re.compile('else')
    soup.find_all(attrs='a':'b'); soup.find_all(text='else')（搜文档中的字符串）
（6）限制查找个数：soup.find_all('a', limit=2)
attrs：为属性,，根据属性键值对来筛选标签，赋值方式可以为:属性名=值,attrs={属性名:值}（但由于class是python关键字，需要使用class_）
text：为文本内容，根据指定文本内容来筛选出标签，单独使用text作为筛选条件，只会返回text，所以一般与其他条件配合使用。
recursive：指定筛选是否递归，当为False时，不会在子结点的后代节点中查找，只会查找子结点。

soup.select(‘标签名'),代表根据标签来筛选出指定标签。
CSS中#xxx代表筛选id，soup.select(‘#xxx')代表根据id筛选出指定标签,返回值是一个列表。
CSS中.xxx代表筛选class，soup.select('.xxx')代表根据class筛选出指定标签,返回值是一个列表。
嵌套select: soup.select(“#xxx .xxxx”)，如(“#id2 .news”)就是id=”id2”标签下class=”news的标签，返回值是一个列表。
（属性查找）
soup.select('head > title') --> <title>Dromouse</title>
soup.select('a[href='...']) --> [...]

find_parents() find_parent()
find_parents()返回所有祖先节点，find_parent()返回直接父节点。

find_next_siblings() find_next_sibling()
find_next_siblings()返回后面所有兄弟节点，find_next_sibling()返回后面第一个兄弟节点。

find_previous_siblings() find_previous_sibling()
find_previous_siblings()返回前面所有兄弟节点，find_previous_sibling()返回前面第一个兄弟节点。

find_all_next() find_next()
find_all_next()返回节点后所有符合条件的节点, find_next()返回第一个符合条件的节点

find_all_previous() 和 find_previous()
find_all_previous()返回节点后所有符合条件的节点, find_previous()返回第一个符合条件的节点
