XPath 全称为 Xml Path Language，即 Xml 路径语言，是一种在 Xml 文档中查找信息的语言。它提供了非常简洁的路径选择表达式，几乎所有的节点定位都可以用它来选择。
XPath 可以用于 Xml 和 Html，在爬虫中经常使用 XPath 获取 Html 文档内容。
lxml 是 Python 语言用 Xpath 解析 XML、Html文档功能最丰富的、最容易的功能模块。
在 XPath 中有七种节点分别是元素、属性、文本、文档、命名空间、处理指令、注释，前3种节点为常用节点

在 XPath中有多种节点关系分别是父节点、子节点、同胞节点、先辈节点、后代节点：
- 父节点：每个元素以及属性都有一个父节点，如：div 节点的父节点是 body 节点
- 子节点：元素节点可有零个、一个或多个子节点，如：第一个 ul 节点的子节点是4个 li 节点
- 同胞节点：拥有相同的父节点的节点，如：两个 div 节点是同胞节点
- 先辈节点：某节点的父节点、父节点的父节点...，如：ul 节点的先辈节点有 div 节点、body 节点
- 后代节点：某个节点的子节点，子节点的子节点...，如：body 节点的后代节点有div 节点、ul 节点、li 节点

————基本语法
nodeName	选择nodeName节点的所有子节点
/	从根节点开始
//	从匹配的节点开始选择节点
*	匹配任意元素节点
.	选择当前节点
..	选择当前节点的父节点
@	选择元素
@*	匹配任意属性节点

——例子（获取的节点一般返回对象列表）：
body	选取 body 的所有子节点
/html	选取子节点 html 节点
/@href    获取 href 属性
//div	选取所有子孙节点的 div 节点
//div/./h4	div 节点下的 h4 节点
../div	选取当前节点的父节点下的所有 div 节点
//@class	所有带有 class 元素的节点
//*	  获取所有子孙节点
//@*	选择所有属性节点
//div[1]	选择第一个 div 节点
//div[2]/ul/li[last()]	选择第二个 div 节点下的最后一个 li 节点
//div[2]/ul/li[position()>3]	选择第二个 div 节点下的前两个 li 节点
//ul[@class='computer' and @name="fore"]	选择 class 属性为 computer ,name值为fore的 ul 节点
//h4[span=4]	选择 h4 节点下 span 值等于4的节点
//li[contains(@class,"aaa")]/a   其中一个属性值为aaa的li下直系a

XPath 中的谓语就是删选表达式，相当于 SQL 中的 Where 条件，谓语被嵌在 [ ] 中
————特殊方法
position()	返回节点的 index 位置
last()	返回节点的个数
contains(string1,string2)	string1 是否包含 string2
text()	返回文本节点
comment()	返回注释节点
normalize-space(string)	去除首位空格，中间多个空格用一个空格代替
substring(string,start,len)	返回从 start 位置开始的指定长度的子字符串,第一个字符下标为1
substring-before(string1,string2)	返回string1中位于第一个string2之前的部分
substring-after(string1,string2)	返回string1中位于第一个string2之后的部分

——例子（一般返回列表）：
//div[position()>1]	选择第二个 div 节点
//div[last()]	选择最后一个 div 节点
//div[last()-2]	选择倒数第三个  div 节点
//li/text()	li 节点中的文本内容
//div/comment()	div 节点下的 html 注释
contains(//h4[2],'手机')	第二个 h4 标签是否包含手机字符串
normalize-space(//li[@class='blank'])	li 节点下 class属性为 blank 的文本去掉空格
substring(//h4[1],1,2)	第一个 h4 节点的前2个字
substring-before(//h4[1],'品牌商')	第一个 h4 节点的品牌商字符串之前的字符串
substring-after(//h4[1],'品牌商')	第一个 h4 节点的品牌商字符串之后的字符串

### 将节点元素转为字符串
lxml.etree.tostring(etree, method='html', with_tail=False)
```
html=etree.HTML(text) #初始化生成一个XPath解析对象
result=etree.tostring(html,encoding='utf-8')   #解析对象输出代码
print(result.decode('utf-8'))#etree会修复HTML文本节点
```

### 读取HTML文件进行解析
```
html=etree.parse('test.html',etree.HTMLParser()) #指定解析器HTMLParser会根据文件修复HTML文件中缺失的如声明信息
result=etree.tostring(html)   #解析成字节
#result=etree.tostringlist(html) #解析成列表
print(result)
```

### 获取所有节点
```
html=etree.parse('test',etree.HTMLParser())
result=html.xpath('//*')  #//代表获取子孙节点，*代表获取所有
print(result)
```

### 获取父节点
```
html=etree.HTML(text,etree.HTMLParser())
result=html.xpath('//a[@href="link2.html"]/../@class')
result1=html.xpath('//a[@href="link2.html"]/parent::*/@class')
print(result)
print(result1)
```

### 文本获取
```
html=etree.HTML(text,etree.HTMLParser())
result=html.xpath('//li[@class="item-1"]/a/text()') #获取a节点下的内容
result1=html.xpath('//li[@class="item-1"]//text()') #获取li下所有子孙节点的内容
```

### 属性多值匹配
```
html=etree.HTML(text1,etree.HTMLParser())
result=html.xpath('//li[@class="aaa"]/a/text()')
result1=html.xpath('//li[contains(@class,"aaa")]/a/text()')
```

### 多属性匹配
```
html=etree.HTML(text1,etree.HTMLParser())
result=html.xpath('//li[@class="aaa" and @name="fore"]/a/text()')
result1=html.xpath('//li[contains(@class,"aaa") and @name="fore"]/a/text()')
```

### 按序选择
```
html=etree.HTML(text1,etree.HTMLParser())

result=html.xpath('//li[contains(@class,"aaa")]/a/text()') #获取所有li节点下a节点的内容
result1=html.xpath('//li[1][contains(@class,"aaa")]/a/text()') #获取第一个
result2=html.xpath('//li[last()][contains(@class,"aaa")]/a/text()') #获取最后一个
result3=html.xpath('//li[position()>2 and position()<4][contains(@class,"aaa")]/a/text()') #获取第一个
result4=html.xpath('//li[last()-2][contains(@class,"aaa")]/a/text()') #获取倒数第三个
```

### 节点轴选择
```
html=etree.HTML(text1,etree.HTMLParser())
result=html.xpath('//li[1]/ancestor::*')  #获取所有祖先节点
result1=html.xpath('//li[1]/ancestor::div')  #获取div祖先节点
result2=html.xpath('//li[1]/attribute::*')  #获取所有属性值
result3=html.xpath('//li[1]/child::*')  #获取所有直接子节点
result4=html.xpath('//li[1]/descendant::a')  #获取所有子孙节点的a节点
result5=html.xpath('//li[1]/following::*')  #获取当前子节之后的所有节点
result6=html.xpath('//li[1]/following-sibling::*')  #获取当前节点的所有同级节点
```

### fromstring
from lxml import html
selector = lxml.fromstring(html)
获取子节点下的文本：
div = selector.xpath('//div[contains('class','_dd')]')[0]
text = div.xpath('string(.)')
