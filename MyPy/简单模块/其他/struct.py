import struct

"""
要把一个 32 位无符号整数变成字节，也就是 4 个长度的 bytes
>>> n = 10240099
>>> b1 = (n & 0xff000000) >> 24
>>> b2 = (n & 0xff0000) >> 16
>>> b3 = (n & 0xff00) >> 8
>>> b4 = n & 0xff
>>> bs = bytes([b1, b2, b3, b4])
>>> bs
"""

# >表示字节顺序是 big-endian，也就是网络序，I 表示 4 字节无符号整数。
print(struct.pack('>I', 10240099))

print(struct.unpack('>IH', b'\xf0\xf0\xf0\xf0\x80\x80'))

"""
BMP 格式采用小端方式存储数据，文件头的结构按顺序如下：
两个字节：'BM'表示 Windows 位图，'BA'表示 OS/2 位图；
一个 4 字节整数：表示位图大小； 一个 4 字节整数：保留位，始终为 0；
一个 4字节整数：实际图像的偏移量；一个 4 字节整数：Header 的字节数；
一个 4 字节整数：图像宽度； 一个 4 字节整数：图像高度
一个 2 字节整数：始终为 1； 一个 2 字节整数：颜色数。
"""
s = b'\x42\x4d\x38\x8c\x0a\x00\x00\x00\x00\x00\x36\x00\x00\x00\x28\x00\x00\x00\x80\x02\x00\x00\x68\x01\x00\x00\x01\x00\x18\x00'
print(struct.unpack('<ccIIIIIIHH', s))