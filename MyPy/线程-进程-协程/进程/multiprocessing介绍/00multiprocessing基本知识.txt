multiprocessing包是Python中的多进程管理包。
与threading.Thread类似，它可以利用multiprocessing.Process对象来创建一个进程。
该进程可以运行在Python程序内部编写的函数。
该Process对象与Thread对象的用法相同，也有start(), run(), join()的方法。
此外multiprocessing包中也有Lock/Event/Semaphore/Condition类
(这些对象可以像多线程那样，通过参数传递给各个进程，用以同步进程，其用法与threading包中的同名类一致。)
所以，multiprocessing的很大一部份与threading使用同一套API，只不过换到了多进程的情境。

但在使用这些共享API的时候，我们要注意以下几点:
◇在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。
所以，有必要对每个Process对象调用join()方法 (实际上等同于wait)。对于多线程来说，由于只有一个进程，所以不存在此必要性。
◇multiprocessing提供了threading包中没有的IPC(比如Pipe和Queue)，效率上更高。
应优先考虑Pipe和Queue，避免使用Lock/Event/Semaphore/Condition等同步方式 (因为它们占据的不是用户进程的资源)。
◇多进程应该避免共享资源。在多线程中，我们可以比较容易地共享资源，比如使用全局变量或者传递参数。
在多进程情况下，由于每个进程有自己独立的内存空间，以上方法并不合适。
此时我们可以通过共享内存和Manager的方法来共享资源。但这样做提高了程序的复杂度，并因为同步的需要而降低了程序的效率。
◇Process.PID中保存有PID，如果进程还没有start()，则PID为None

我们可以从下面的程序中看到Thread对象和Process对象在使用上的相似性与结果上的不同。
各个线程和进程都做一件事：打印PID。但问题是，所有的任务在打印的时候都会向同一个标准输出(stdout)输出。这样输出的字符会混合在一起，无法阅读。
使用Lock同步，在一个任务输出完成之后，再允许另一个任务输出，可以避免多个任务同时向终端输出

------------Pipe和Queue----------
Pipe和Queue可以用来传送常见的对象。
Pipe可以是单向(half-duplex)，也可以是双向(duplex)。我们通过mutiprocessing.Pipe(duplex=False)创建单向管道 (默认为双向)。
一个进程从PIPE一端输入对象，然后被PIPE另一端的进程接收，单向管道只允许管道一端的进程输入，而双向管道则允许从两端输入。

Queue与Pipe相类似，都是先进先出的结构。但Queue允许多个进程放入，多个进程从队列取出对象。
Queue使用mutiprocessing.Queue(maxsize)创建，maxsize表示队列中可以存放对象的最大数量。

-----------子进程无返回值------------------
◇误区：
进程池的大小是每次同时执行的进程数，但是并不会影响主进程申请进程的数量。主进程申请多进程量不等于池子大小。
◇进程调用方法
非阻塞方法（进程并发执行）：
multiprocessing.Pool.apply_async() 和 multiprocessing.Pool.imap()
阻塞方法（进程顺序执行）：
multiprocessing.Pool.apply()和 multiprocessing.Pool.map()

-----------子进程有返回值------------------
只有apply_async可以有返回值，apply，map，imap不可以设置返回值.

-----------多进程共享资源-----------
申请进程有两种方式一种是multiprocessing.Process()，另一种是multiprocessing.Pool(process=3).apply_async().
multiprocessing提供三种多进程之间共享数据的数据结构: Queue, Array 和Manager.
from multiprocessing import Queue, Array, Manager
Queue、和Array只适用Process类申请的多进程共享资源。
Manager可以适用Pool和Process类申请的多进程共享资源。

-----------多线程Threading-----------
1、子进程无返回值
Multiprocessing.dummy.Pool() 与Multiprocessing.Pool() 的用法一样

非阻塞方法
multiprocessing.dummy.Pool.apply_async() 和 multiprocessing.dummy.Pool.imap()
阻塞方法
multiprocessing.dummy.Pool.apply()和 multiprocessing.dummy.Pool.map()




